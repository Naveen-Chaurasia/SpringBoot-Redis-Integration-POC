#It's only used/needed if you're using Spring Cloud and your application's configuration is stored on a remote configuration server
# (e.g. Spring Cloud Config Server).


#Spring Cloud Config is Spring's client/server approach for storing and serving distributed configurations across multiple applications
# and environments. This configuration store is ideally versioned under Git version control and can be modified at application runtime.


#Spring Cloud Vault Config provides client-side support for externalized configuration in a distributed system. With HashiCorp\u2019s Vault
# you have a central place to manage external secret properties for applications across all environments. Vault can manage static and
#  dynamic secrets such as username/password for remote applications/resources and provide credentials for external services such as MySQL,
#   PostgreSQL, Apache Cassandra, MongoDB, Consul, AWS and more.


#Spring Cloud Vault Config provides client-side support for externalized configuration in a distributed system. With HashiCorp\u2019s Vault
# you have a central place to manage external secret properties for applications across all environments. Vault can manage static and 
#dynamic secrets such as username/password for remote applications/resources and provide credentials for external services such as MySQL,
# PostgreSQL, Apache Cassandra, MongoDB, Consul, AWS and more.


#Vault takes all of these credentials and centralizes them so that they are defined in one location, which reduces unwanted exposure to 
#credentials. But Vault takes it a few steps further by making sure users, apps, and systems are authenticated and explicitly authorized to access
# resources, while also providing an audit trail that captures and preserves a history of clients' actions.

https://cloud.spring.io/spring-cloud-vault/reference/html/


https://www.vaultproject.io/docs/secrets/kv/kv-v1

for example:

spring.cloud.vault:
    mysql:
        enabled: true
        role: readonly
        backend: mysql
        username-property: spring.datasource.username
        password-property: spring.datasource.password